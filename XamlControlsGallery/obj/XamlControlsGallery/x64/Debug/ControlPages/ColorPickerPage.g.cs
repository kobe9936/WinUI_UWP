#pragma checksum "C:\Users\kobe9\source\repos\WinUI_UWP\XamlControlsGallery\ControlPages\ColorPickerPage.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "28952BD755E3A3E2942B99D81EE9677003A2497B0A4C4CC3AF75625CF4634ABC"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AppUIBasics.ControlPages
{
    partial class ColorPickerPage : 
        global::Microsoft.UI.Xaml.Controls.Page, 
        global::Microsoft.UI.Xaml.Markup.IComponentConnector
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 0.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_AppUIBasics_ControlExampleSubstitution_Value(global::AppUIBasics.ControlExampleSubstitution obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.Value = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_ColorPicker_IsMoreButtonVisible(global::Microsoft.UI.Xaml.Controls.ColorPicker obj, global::System.Boolean value)
            {
                obj.IsMoreButtonVisible = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_ColorPicker_IsColorSliderVisible(global::Microsoft.UI.Xaml.Controls.ColorPicker obj, global::System.Boolean value)
            {
                obj.IsColorSliderVisible = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_ColorPicker_IsColorChannelTextInputVisible(global::Microsoft.UI.Xaml.Controls.ColorPicker obj, global::System.Boolean value)
            {
                obj.IsColorChannelTextInputVisible = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_ColorPicker_IsHexInputVisible(global::Microsoft.UI.Xaml.Controls.ColorPicker obj, global::System.Boolean value)
            {
                obj.IsHexInputVisible = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_ColorPicker_IsAlphaEnabled(global::Microsoft.UI.Xaml.Controls.ColorPicker obj, global::System.Boolean value)
            {
                obj.IsAlphaEnabled = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_Control_IsEnabled(global::Microsoft.UI.Xaml.Controls.Control obj, global::System.Boolean value)
            {
                obj.IsEnabled = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_ColorPicker_IsAlphaSliderVisible(global::Microsoft.UI.Xaml.Controls.ColorPicker obj, global::System.Boolean value)
            {
                obj.IsAlphaSliderVisible = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_ColorPicker_IsAlphaTextInputVisible(global::Microsoft.UI.Xaml.Controls.ColorPicker obj, global::System.Boolean value)
            {
                obj.IsAlphaTextInputVisible = value;
            }
            public static void Set_Microsoft_UI_Xaml_Media_SolidColorBrush_Color(global::Microsoft.UI.Xaml.Media.SolidColorBrush obj, global::Windows.UI.Color value)
            {
                obj.Color = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 0.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class ColorPickerPage_obj1_Bindings :
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            IColorPickerPage_Bindings
        {
            private global::AppUIBasics.ControlPages.ColorPickerPage dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Microsoft.UI.Xaml.Controls.ColorPicker obj3;
            private global::Microsoft.UI.Xaml.Controls.CheckBox obj9;
            private global::Microsoft.UI.Xaml.Controls.CheckBox obj10;
            private global::Microsoft.UI.Xaml.Media.SolidColorBrush obj12;
            private global::AppUIBasics.ControlExampleSubstitution obj13;
            private global::AppUIBasics.ControlExampleSubstitution obj14;
            private global::AppUIBasics.ControlExampleSubstitution obj15;
            private global::AppUIBasics.ControlExampleSubstitution obj16;
            private global::AppUIBasics.ControlExampleSubstitution obj17;
            private global::AppUIBasics.ControlExampleSubstitution obj18;
            private global::AppUIBasics.ControlExampleSubstitution obj19;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj3IsMoreButtonVisibleDisabled = false;
            private static bool isobj3IsColorSliderVisibleDisabled = false;
            private static bool isobj3IsColorChannelTextInputVisibleDisabled = false;
            private static bool isobj3IsHexInputVisibleDisabled = false;
            private static bool isobj3IsAlphaEnabledDisabled = false;
            private static bool isobj3IsAlphaSliderVisibleDisabled = false;
            private static bool isobj3IsAlphaTextInputVisibleDisabled = false;
            private static bool isobj9IsEnabledDisabled = false;
            private static bool isobj10IsEnabledDisabled = false;
            private static bool isobj12ColorDisabled = false;
            private static bool isobj13ValueDisabled = false;
            private static bool isobj14ValueDisabled = false;
            private static bool isobj15ValueDisabled = false;
            private static bool isobj16ValueDisabled = false;
            private static bool isobj17ValueDisabled = false;
            private static bool isobj18ValueDisabled = false;
            private static bool isobj19ValueDisabled = false;

            private ColorPickerPage_obj1_BindingsTracking bindingsTracking;

            public ColorPickerPage_obj1_Bindings()
            {
                this.bindingsTracking = new ColorPickerPage_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 10 && columnNumber == 17)
                {
                    isobj3IsMoreButtonVisibleDisabled = true;
                }
                else if (lineNumber == 11 && columnNumber == 17)
                {
                    isobj3IsColorSliderVisibleDisabled = true;
                }
                else if (lineNumber == 12 && columnNumber == 17)
                {
                    isobj3IsColorChannelTextInputVisibleDisabled = true;
                }
                else if (lineNumber == 13 && columnNumber == 17)
                {
                    isobj3IsHexInputVisibleDisabled = true;
                }
                else if (lineNumber == 14 && columnNumber == 17)
                {
                    isobj3IsAlphaEnabledDisabled = true;
                }
                else if (lineNumber == 15 && columnNumber == 17)
                {
                    isobj3IsAlphaSliderVisibleDisabled = true;
                }
                else if (lineNumber == 16 && columnNumber == 17)
                {
                    isobj3IsAlphaTextInputVisibleDisabled = true;
                }
                else if (lineNumber == 26 && columnNumber == 37)
                {
                    isobj9IsEnabledDisabled = true;
                }
                else if (lineNumber == 28 && columnNumber == 37)
                {
                    isobj10IsEnabledDisabled = true;
                }
                else if (lineNumber == 34 && columnNumber == 50)
                {
                    isobj12ColorDisabled = true;
                }
                else if (lineNumber == 54 && columnNumber == 77)
                {
                    isobj13ValueDisabled = true;
                }
                else if (lineNumber == 55 && columnNumber == 78)
                {
                    isobj14ValueDisabled = true;
                }
                else if (lineNumber == 56 && columnNumber == 88)
                {
                    isobj15ValueDisabled = true;
                }
                else if (lineNumber == 57 && columnNumber == 75)
                {
                    isobj16ValueDisabled = true;
                }
                else if (lineNumber == 58 && columnNumber == 72)
                {
                    isobj17ValueDisabled = true;
                }
                else if (lineNumber == 59 && columnNumber == 78)
                {
                    isobj18ValueDisabled = true;
                }
                else if (lineNumber == 60 && columnNumber == 81)
                {
                    isobj19ValueDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 3: // ControlPages\ColorPickerPage.xaml line 9
                        this.obj3 = (Microsoft.UI.Xaml.Controls.ColorPicker)target;
                        break;
                    case 9: // ControlPages\ColorPickerPage.xaml line 25
                        this.obj9 = (Microsoft.UI.Xaml.Controls.CheckBox)target;
                        break;
                    case 10: // ControlPages\ColorPickerPage.xaml line 27
                        this.obj10 = (Microsoft.UI.Xaml.Controls.CheckBox)target;
                        break;
                    case 12: // ControlPages\ColorPickerPage.xaml line 34
                        this.obj12 = (Microsoft.UI.Xaml.Media.SolidColorBrush)target;
                        break;
                    case 13: // ControlPages\ColorPickerPage.xaml line 54
                        this.obj13 = (AppUIBasics.ControlExampleSubstitution)target;
                        break;
                    case 14: // ControlPages\ColorPickerPage.xaml line 55
                        this.obj14 = (AppUIBasics.ControlExampleSubstitution)target;
                        break;
                    case 15: // ControlPages\ColorPickerPage.xaml line 56
                        this.obj15 = (AppUIBasics.ControlExampleSubstitution)target;
                        break;
                    case 16: // ControlPages\ColorPickerPage.xaml line 57
                        this.obj16 = (AppUIBasics.ControlExampleSubstitution)target;
                        break;
                    case 17: // ControlPages\ColorPickerPage.xaml line 58
                        this.obj17 = (AppUIBasics.ControlExampleSubstitution)target;
                        break;
                    case 18: // ControlPages\ColorPickerPage.xaml line 59
                        this.obj18 = (AppUIBasics.ControlExampleSubstitution)target;
                        break;
                    case 19: // ControlPages\ColorPickerPage.xaml line 60
                        this.obj19 = (AppUIBasics.ControlExampleSubstitution)target;
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 0.0.0.0")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // IColorPickerPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (AppUIBasics.ControlPages.ColorPickerPage)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Activated(object obj, global::Microsoft.UI.Xaml.WindowActivatedEventArgs data)
            {
                this.Initialize();
            }

            public void Loading(global::Microsoft.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::AppUIBasics.ControlPages.ColorPickerPage obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_moreBtn(obj.moreBtn, phase);
                        this.Update_colorSlider(obj.colorSlider, phase);
                        this.Update_colorChannelInput(obj.colorChannelInput, phase);
                        this.Update_hexInput(obj.hexInput, phase);
                        this.Update_alpha(obj.alpha, phase);
                        this.Update_alphaSlider(obj.alphaSlider, phase);
                        this.Update_alphaTextInput(obj.alphaTextInput, phase);
                        this.Update_colorPicker(obj.colorPicker, phase);
                    }
                }
            }
            private void Update_moreBtn(global::Microsoft.UI.Xaml.Controls.CheckBox obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_moreBtn(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_moreBtn_IsChecked(obj.IsChecked, phase);
                    }
                }
            }
            private void Update_moreBtn_IsChecked(global::System.Nullable<global::System.Boolean> obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_moreBtn_IsChecked_Value(obj.Value, phase);
                    }
                }
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ControlPages\ColorPickerPage.xaml line 54
                    if (!isobj13ValueDisabled)
                    {
                        XamlBindingSetters.Set_AppUIBasics_ControlExampleSubstitution_Value(this.obj13, obj, null);
                    }
                }
            }
            private void Update_moreBtn_IsChecked_Value(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ControlPages\ColorPickerPage.xaml line 9
                    if (!isobj3IsMoreButtonVisibleDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ColorPicker_IsMoreButtonVisible(this.obj3, obj);
                    }
                }
            }
            private void Update_colorSlider(global::Microsoft.UI.Xaml.Controls.CheckBox obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_colorSlider(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_colorSlider_IsChecked(obj.IsChecked, phase);
                    }
                }
            }
            private void Update_colorSlider_IsChecked(global::System.Nullable<global::System.Boolean> obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_colorSlider_IsChecked_Value(obj.Value, phase);
                    }
                }
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ControlPages\ColorPickerPage.xaml line 55
                    if (!isobj14ValueDisabled)
                    {
                        XamlBindingSetters.Set_AppUIBasics_ControlExampleSubstitution_Value(this.obj14, obj, null);
                    }
                }
            }
            private void Update_colorSlider_IsChecked_Value(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ControlPages\ColorPickerPage.xaml line 9
                    if (!isobj3IsColorSliderVisibleDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ColorPicker_IsColorSliderVisible(this.obj3, obj);
                    }
                }
            }
            private void Update_colorChannelInput(global::Microsoft.UI.Xaml.Controls.CheckBox obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_colorChannelInput(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_colorChannelInput_IsChecked(obj.IsChecked, phase);
                    }
                }
            }
            private void Update_colorChannelInput_IsChecked(global::System.Nullable<global::System.Boolean> obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_colorChannelInput_IsChecked_Value(obj.Value, phase);
                    }
                }
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ControlPages\ColorPickerPage.xaml line 56
                    if (!isobj15ValueDisabled)
                    {
                        XamlBindingSetters.Set_AppUIBasics_ControlExampleSubstitution_Value(this.obj15, obj, null);
                    }
                }
            }
            private void Update_colorChannelInput_IsChecked_Value(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ControlPages\ColorPickerPage.xaml line 9
                    if (!isobj3IsColorChannelTextInputVisibleDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ColorPicker_IsColorChannelTextInputVisible(this.obj3, obj);
                    }
                }
            }
            private void Update_hexInput(global::Microsoft.UI.Xaml.Controls.CheckBox obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_hexInput(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_hexInput_IsChecked(obj.IsChecked, phase);
                    }
                }
            }
            private void Update_hexInput_IsChecked(global::System.Nullable<global::System.Boolean> obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_hexInput_IsChecked_Value(obj.Value, phase);
                    }
                }
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ControlPages\ColorPickerPage.xaml line 57
                    if (!isobj16ValueDisabled)
                    {
                        XamlBindingSetters.Set_AppUIBasics_ControlExampleSubstitution_Value(this.obj16, obj, null);
                    }
                }
            }
            private void Update_hexInput_IsChecked_Value(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ControlPages\ColorPickerPage.xaml line 9
                    if (!isobj3IsHexInputVisibleDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ColorPicker_IsHexInputVisible(this.obj3, obj);
                    }
                }
            }
            private void Update_alpha(global::Microsoft.UI.Xaml.Controls.CheckBox obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_alpha(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_alpha_IsChecked(obj.IsChecked, phase);
                    }
                }
            }
            private void Update_alpha_IsChecked(global::System.Nullable<global::System.Boolean> obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_alpha_IsChecked_Value(obj.Value, phase);
                    }
                }
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ControlPages\ColorPickerPage.xaml line 58
                    if (!isobj17ValueDisabled)
                    {
                        XamlBindingSetters.Set_AppUIBasics_ControlExampleSubstitution_Value(this.obj17, obj, null);
                    }
                }
            }
            private void Update_alpha_IsChecked_Value(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ControlPages\ColorPickerPage.xaml line 9
                    if (!isobj3IsAlphaEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ColorPicker_IsAlphaEnabled(this.obj3, obj);
                    }
                    // ControlPages\ColorPickerPage.xaml line 25
                    if (!isobj9IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Control_IsEnabled(this.obj9, obj);
                    }
                    // ControlPages\ColorPickerPage.xaml line 27
                    if (!isobj10IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Control_IsEnabled(this.obj10, obj);
                    }
                }
            }
            private void Update_alphaSlider(global::Microsoft.UI.Xaml.Controls.CheckBox obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_alphaSlider(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_alphaSlider_IsChecked(obj.IsChecked, phase);
                    }
                }
            }
            private void Update_alphaSlider_IsChecked(global::System.Nullable<global::System.Boolean> obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_alphaSlider_IsChecked_Value(obj.Value, phase);
                    }
                }
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ControlPages\ColorPickerPage.xaml line 59
                    if (!isobj18ValueDisabled)
                    {
                        XamlBindingSetters.Set_AppUIBasics_ControlExampleSubstitution_Value(this.obj18, obj, null);
                    }
                }
            }
            private void Update_alphaSlider_IsChecked_Value(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ControlPages\ColorPickerPage.xaml line 9
                    if (!isobj3IsAlphaSliderVisibleDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ColorPicker_IsAlphaSliderVisible(this.obj3, obj);
                    }
                }
            }
            private void Update_alphaTextInput(global::Microsoft.UI.Xaml.Controls.CheckBox obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_alphaTextInput(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_alphaTextInput_IsChecked(obj.IsChecked, phase);
                    }
                }
            }
            private void Update_alphaTextInput_IsChecked(global::System.Nullable<global::System.Boolean> obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_alphaTextInput_IsChecked_Value(obj.Value, phase);
                    }
                }
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ControlPages\ColorPickerPage.xaml line 60
                    if (!isobj19ValueDisabled)
                    {
                        XamlBindingSetters.Set_AppUIBasics_ControlExampleSubstitution_Value(this.obj19, obj, null);
                    }
                }
            }
            private void Update_alphaTextInput_IsChecked_Value(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ControlPages\ColorPickerPage.xaml line 9
                    if (!isobj3IsAlphaTextInputVisibleDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ColorPicker_IsAlphaTextInputVisible(this.obj3, obj);
                    }
                }
            }
            private void Update_colorPicker(global::Microsoft.UI.Xaml.Controls.ColorPicker obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_colorPicker(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_colorPicker_Color(obj.Color, phase);
                    }
                }
            }
            private void Update_colorPicker_Color(global::Windows.UI.Color obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ControlPages\ColorPickerPage.xaml line 34
                    if (!isobj12ColorDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Media_SolidColorBrush_Color(this.obj12, obj);
                    }
                }
            }
 

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 0.0.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class ColorPickerPage_obj1_BindingsTracking
            {
                private global::System.WeakReference<ColorPickerPage_obj1_Bindings> weakRefToBindingObj; 

                public ColorPickerPage_obj1_BindingsTracking(ColorPickerPage_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<ColorPickerPage_obj1_Bindings>(obj);
                }

                public ColorPickerPage_obj1_Bindings TryGetBindingObject()
                {
                    ColorPickerPage_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_moreBtn(null);
                    UpdateChildListeners_colorSlider(null);
                    UpdateChildListeners_colorChannelInput(null);
                    UpdateChildListeners_hexInput(null);
                    UpdateChildListeners_alpha(null);
                    UpdateChildListeners_alphaSlider(null);
                    UpdateChildListeners_alphaTextInput(null);
                    UpdateChildListeners_colorPicker(null);
                }

                public void DependencyPropertyChanged_moreBtn_IsChecked(global::Microsoft.UI.Xaml.DependencyObject sender, global::Microsoft.UI.Xaml.DependencyProperty prop)
                {
                    ColorPickerPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Microsoft.UI.Xaml.Controls.CheckBox obj = sender as global::Microsoft.UI.Xaml.Controls.CheckBox;
                        if (obj != null)
                        {
                            bindings.Update_moreBtn_IsChecked(obj.IsChecked, DATA_CHANGED);
                        }
                    }
                }
                private global::Microsoft.UI.Xaml.Controls.CheckBox cache_moreBtn = null;
                private long tokenDPC_moreBtn_IsChecked = 0;
                public void UpdateChildListeners_moreBtn(global::Microsoft.UI.Xaml.Controls.CheckBox obj)
                {
                    if (obj != cache_moreBtn)
                    {
                        if (cache_moreBtn != null)
                        {
                            cache_moreBtn.UnregisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, tokenDPC_moreBtn_IsChecked);
                            cache_moreBtn = null;
                        }
                        if (obj != null)
                        {
                            cache_moreBtn = obj;
                            tokenDPC_moreBtn_IsChecked = obj.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, DependencyPropertyChanged_moreBtn_IsChecked);
                        }
                    }
                }
                public void DependencyPropertyChanged_colorSlider_IsChecked(global::Microsoft.UI.Xaml.DependencyObject sender, global::Microsoft.UI.Xaml.DependencyProperty prop)
                {
                    ColorPickerPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Microsoft.UI.Xaml.Controls.CheckBox obj = sender as global::Microsoft.UI.Xaml.Controls.CheckBox;
                        if (obj != null)
                        {
                            bindings.Update_colorSlider_IsChecked(obj.IsChecked, DATA_CHANGED);
                        }
                    }
                }
                private global::Microsoft.UI.Xaml.Controls.CheckBox cache_colorSlider = null;
                private long tokenDPC_colorSlider_IsChecked = 0;
                public void UpdateChildListeners_colorSlider(global::Microsoft.UI.Xaml.Controls.CheckBox obj)
                {
                    if (obj != cache_colorSlider)
                    {
                        if (cache_colorSlider != null)
                        {
                            cache_colorSlider.UnregisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, tokenDPC_colorSlider_IsChecked);
                            cache_colorSlider = null;
                        }
                        if (obj != null)
                        {
                            cache_colorSlider = obj;
                            tokenDPC_colorSlider_IsChecked = obj.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, DependencyPropertyChanged_colorSlider_IsChecked);
                        }
                    }
                }
                public void DependencyPropertyChanged_colorChannelInput_IsChecked(global::Microsoft.UI.Xaml.DependencyObject sender, global::Microsoft.UI.Xaml.DependencyProperty prop)
                {
                    ColorPickerPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Microsoft.UI.Xaml.Controls.CheckBox obj = sender as global::Microsoft.UI.Xaml.Controls.CheckBox;
                        if (obj != null)
                        {
                            bindings.Update_colorChannelInput_IsChecked(obj.IsChecked, DATA_CHANGED);
                        }
                    }
                }
                private global::Microsoft.UI.Xaml.Controls.CheckBox cache_colorChannelInput = null;
                private long tokenDPC_colorChannelInput_IsChecked = 0;
                public void UpdateChildListeners_colorChannelInput(global::Microsoft.UI.Xaml.Controls.CheckBox obj)
                {
                    if (obj != cache_colorChannelInput)
                    {
                        if (cache_colorChannelInput != null)
                        {
                            cache_colorChannelInput.UnregisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, tokenDPC_colorChannelInput_IsChecked);
                            cache_colorChannelInput = null;
                        }
                        if (obj != null)
                        {
                            cache_colorChannelInput = obj;
                            tokenDPC_colorChannelInput_IsChecked = obj.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, DependencyPropertyChanged_colorChannelInput_IsChecked);
                        }
                    }
                }
                public void DependencyPropertyChanged_hexInput_IsChecked(global::Microsoft.UI.Xaml.DependencyObject sender, global::Microsoft.UI.Xaml.DependencyProperty prop)
                {
                    ColorPickerPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Microsoft.UI.Xaml.Controls.CheckBox obj = sender as global::Microsoft.UI.Xaml.Controls.CheckBox;
                        if (obj != null)
                        {
                            bindings.Update_hexInput_IsChecked(obj.IsChecked, DATA_CHANGED);
                        }
                    }
                }
                private global::Microsoft.UI.Xaml.Controls.CheckBox cache_hexInput = null;
                private long tokenDPC_hexInput_IsChecked = 0;
                public void UpdateChildListeners_hexInput(global::Microsoft.UI.Xaml.Controls.CheckBox obj)
                {
                    if (obj != cache_hexInput)
                    {
                        if (cache_hexInput != null)
                        {
                            cache_hexInput.UnregisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, tokenDPC_hexInput_IsChecked);
                            cache_hexInput = null;
                        }
                        if (obj != null)
                        {
                            cache_hexInput = obj;
                            tokenDPC_hexInput_IsChecked = obj.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, DependencyPropertyChanged_hexInput_IsChecked);
                        }
                    }
                }
                public void DependencyPropertyChanged_alpha_IsChecked(global::Microsoft.UI.Xaml.DependencyObject sender, global::Microsoft.UI.Xaml.DependencyProperty prop)
                {
                    ColorPickerPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Microsoft.UI.Xaml.Controls.CheckBox obj = sender as global::Microsoft.UI.Xaml.Controls.CheckBox;
                        if (obj != null)
                        {
                            bindings.Update_alpha_IsChecked(obj.IsChecked, DATA_CHANGED);
                        }
                    }
                }
                private global::Microsoft.UI.Xaml.Controls.CheckBox cache_alpha = null;
                private long tokenDPC_alpha_IsChecked = 0;
                public void UpdateChildListeners_alpha(global::Microsoft.UI.Xaml.Controls.CheckBox obj)
                {
                    if (obj != cache_alpha)
                    {
                        if (cache_alpha != null)
                        {
                            cache_alpha.UnregisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, tokenDPC_alpha_IsChecked);
                            cache_alpha = null;
                        }
                        if (obj != null)
                        {
                            cache_alpha = obj;
                            tokenDPC_alpha_IsChecked = obj.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, DependencyPropertyChanged_alpha_IsChecked);
                        }
                    }
                }
                public void DependencyPropertyChanged_alphaSlider_IsChecked(global::Microsoft.UI.Xaml.DependencyObject sender, global::Microsoft.UI.Xaml.DependencyProperty prop)
                {
                    ColorPickerPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Microsoft.UI.Xaml.Controls.CheckBox obj = sender as global::Microsoft.UI.Xaml.Controls.CheckBox;
                        if (obj != null)
                        {
                            bindings.Update_alphaSlider_IsChecked(obj.IsChecked, DATA_CHANGED);
                        }
                    }
                }
                private global::Microsoft.UI.Xaml.Controls.CheckBox cache_alphaSlider = null;
                private long tokenDPC_alphaSlider_IsChecked = 0;
                public void UpdateChildListeners_alphaSlider(global::Microsoft.UI.Xaml.Controls.CheckBox obj)
                {
                    if (obj != cache_alphaSlider)
                    {
                        if (cache_alphaSlider != null)
                        {
                            cache_alphaSlider.UnregisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, tokenDPC_alphaSlider_IsChecked);
                            cache_alphaSlider = null;
                        }
                        if (obj != null)
                        {
                            cache_alphaSlider = obj;
                            tokenDPC_alphaSlider_IsChecked = obj.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, DependencyPropertyChanged_alphaSlider_IsChecked);
                        }
                    }
                }
                public void DependencyPropertyChanged_alphaTextInput_IsChecked(global::Microsoft.UI.Xaml.DependencyObject sender, global::Microsoft.UI.Xaml.DependencyProperty prop)
                {
                    ColorPickerPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Microsoft.UI.Xaml.Controls.CheckBox obj = sender as global::Microsoft.UI.Xaml.Controls.CheckBox;
                        if (obj != null)
                        {
                            bindings.Update_alphaTextInput_IsChecked(obj.IsChecked, DATA_CHANGED);
                        }
                    }
                }
                private global::Microsoft.UI.Xaml.Controls.CheckBox cache_alphaTextInput = null;
                private long tokenDPC_alphaTextInput_IsChecked = 0;
                public void UpdateChildListeners_alphaTextInput(global::Microsoft.UI.Xaml.Controls.CheckBox obj)
                {
                    if (obj != cache_alphaTextInput)
                    {
                        if (cache_alphaTextInput != null)
                        {
                            cache_alphaTextInput.UnregisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, tokenDPC_alphaTextInput_IsChecked);
                            cache_alphaTextInput = null;
                        }
                        if (obj != null)
                        {
                            cache_alphaTextInput = obj;
                            tokenDPC_alphaTextInput_IsChecked = obj.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, DependencyPropertyChanged_alphaTextInput_IsChecked);
                        }
                    }
                }
                public void DependencyPropertyChanged_colorPicker_Color(global::Microsoft.UI.Xaml.DependencyObject sender, global::Microsoft.UI.Xaml.DependencyProperty prop)
                {
                    ColorPickerPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Microsoft.UI.Xaml.Controls.ColorPicker obj = sender as global::Microsoft.UI.Xaml.Controls.ColorPicker;
                        if (obj != null)
                        {
                            bindings.Update_colorPicker_Color(obj.Color, DATA_CHANGED);
                        }
                    }
                }
                private global::Microsoft.UI.Xaml.Controls.ColorPicker cache_colorPicker = null;
                private long tokenDPC_colorPicker_Color = 0;
                public void UpdateChildListeners_colorPicker(global::Microsoft.UI.Xaml.Controls.ColorPicker obj)
                {
                    if (obj != cache_colorPicker)
                    {
                        if (cache_colorPicker != null)
                        {
                            cache_colorPicker.UnregisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.ColorPicker.ColorProperty, tokenDPC_colorPicker_Color);
                            cache_colorPicker = null;
                        }
                        if (obj != null)
                        {
                            cache_colorPicker = obj;
                            tokenDPC_colorPicker_Color = obj.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.ColorPicker.ColorProperty, DependencyPropertyChanged_colorPicker_Color);
                        }
                    }
                }
            }
        }
        /// <summary>
        /// GetWeakRefTarget()
        /// </summary>
        private static T GetWeakRefTarget<T>(global::System.WeakReference<T> weakRef) where T : class
        {
            if (weakRef.TryGetTarget(out T weakRefValue))
            {
                return weakRefValue;
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 0.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2: // ControlPages\ColorPickerPage.xaml line 7
                {
                    this.Example1 = (AppUIBasics.ControlExample)target;
                }
                break;
            case 3: // ControlPages\ColorPickerPage.xaml line 9
                {
                    this.colorPicker = (Microsoft.UI.Xaml.Controls.ColorPicker)target;
                }
                break;
            case 4: // ControlPages\ColorPickerPage.xaml line 20
                {
                    this.moreBtn = (Microsoft.UI.Xaml.Controls.CheckBox)target;
                }
                break;
            case 5: // ControlPages\ColorPickerPage.xaml line 21
                {
                    this.colorSlider = (Microsoft.UI.Xaml.Controls.CheckBox)target;
                }
                break;
            case 6: // ControlPages\ColorPickerPage.xaml line 22
                {
                    this.colorChannelInput = (Microsoft.UI.Xaml.Controls.CheckBox)target;
                }
                break;
            case 7: // ControlPages\ColorPickerPage.xaml line 23
                {
                    this.hexInput = (Microsoft.UI.Xaml.Controls.CheckBox)target;
                }
                break;
            case 8: // ControlPages\ColorPickerPage.xaml line 24
                {
                    this.alpha = (Microsoft.UI.Xaml.Controls.CheckBox)target;
                }
                break;
            case 9: // ControlPages\ColorPickerPage.xaml line 25
                {
                    this.alphaSlider = (Microsoft.UI.Xaml.Controls.CheckBox)target;
                }
                break;
            case 10: // ControlPages\ColorPickerPage.xaml line 27
                {
                    this.alphaTextInput = (Microsoft.UI.Xaml.Controls.CheckBox)target;
                }
                break;
            case 11: // ControlPages\ColorPickerPage.xaml line 31
                {
                    this.previewRect = (Microsoft.UI.Xaml.Shapes.Rectangle)target;
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 0.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Microsoft.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // ControlPages\ColorPickerPage.xaml line 1
                {                    
                    global::Microsoft.UI.Xaml.Controls.Page element1 = (global::Microsoft.UI.Xaml.Controls.Page)target;
                    ColorPickerPage_obj1_Bindings bindings = new ColorPickerPage_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

