#pragma checksum "C:\Users\kobe9\source\repos\WinUI_UWP\XamlControlsGallery\ControlPages\MenuFlyoutPage.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "78BF13FD249C511FAA1F6A46744240E1E619391D6EF02C2027B6DEBCC8A72669"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AppUIBasics.ControlPages
{
    partial class MenuFlyoutPage : 
        global::Microsoft.UI.Xaml.Controls.Page, 
        global::Microsoft.UI.Xaml.Markup.IComponentConnector
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 0.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_AppUIBasics_ControlExampleSubstitution_Value(global::AppUIBasics.ControlExampleSubstitution obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.Value = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 0.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class MenuFlyoutPage_obj1_Bindings :
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            IMenuFlyoutPage_Bindings
        {
            private global::AppUIBasics.ControlPages.MenuFlyoutPage dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::AppUIBasics.ControlExampleSubstitution obj13;
            private global::AppUIBasics.ControlExampleSubstitution obj14;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj13ValueDisabled = false;
            private static bool isobj14ValueDisabled = false;

            private MenuFlyoutPage_obj1_BindingsTracking bindingsTracking;

            public MenuFlyoutPage_obj1_Bindings()
            {
                this.bindingsTracking = new MenuFlyoutPage_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 72 && columnNumber == 70)
                {
                    isobj13ValueDisabled = true;
                }
                else if (lineNumber == 73 && columnNumber == 71)
                {
                    isobj14ValueDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 13: // ControlPages\MenuFlyoutPage.xaml line 72
                        this.obj13 = (AppUIBasics.ControlExampleSubstitution)target;
                        break;
                    case 14: // ControlPages\MenuFlyoutPage.xaml line 73
                        this.obj14 = (AppUIBasics.ControlExampleSubstitution)target;
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 0.0.0.0")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // IMenuFlyoutPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (AppUIBasics.ControlPages.MenuFlyoutPage)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Activated(object obj, global::Microsoft.UI.Xaml.WindowActivatedEventArgs data)
            {
                this.Initialize();
            }

            public void Loading(global::Microsoft.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::AppUIBasics.ControlPages.MenuFlyoutPage obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_RepeatToggleMenuFlyoutItem(obj.RepeatToggleMenuFlyoutItem, phase);
                        this.Update_ShuffleToggleMenuFlyoutItem(obj.ShuffleToggleMenuFlyoutItem, phase);
                    }
                }
            }
            private void Update_RepeatToggleMenuFlyoutItem(global::Microsoft.UI.Xaml.Controls.ToggleMenuFlyoutItem obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_RepeatToggleMenuFlyoutItem(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_RepeatToggleMenuFlyoutItem_IsChecked(obj.IsChecked, phase);
                    }
                }
            }
            private void Update_RepeatToggleMenuFlyoutItem_IsChecked(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ControlPages\MenuFlyoutPage.xaml line 72
                    if (!isobj13ValueDisabled)
                    {
                        XamlBindingSetters.Set_AppUIBasics_ControlExampleSubstitution_Value(this.obj13, obj, null);
                    }
                }
            }
            private void Update_ShuffleToggleMenuFlyoutItem(global::Microsoft.UI.Xaml.Controls.ToggleMenuFlyoutItem obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ShuffleToggleMenuFlyoutItem(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ShuffleToggleMenuFlyoutItem_IsChecked(obj.IsChecked, phase);
                    }
                }
            }
            private void Update_ShuffleToggleMenuFlyoutItem_IsChecked(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ControlPages\MenuFlyoutPage.xaml line 73
                    if (!isobj14ValueDisabled)
                    {
                        XamlBindingSetters.Set_AppUIBasics_ControlExampleSubstitution_Value(this.obj14, obj, null);
                    }
                }
            }
 

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 0.0.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class MenuFlyoutPage_obj1_BindingsTracking
            {
                private global::System.WeakReference<MenuFlyoutPage_obj1_Bindings> weakRefToBindingObj; 

                public MenuFlyoutPage_obj1_BindingsTracking(MenuFlyoutPage_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<MenuFlyoutPage_obj1_Bindings>(obj);
                }

                public MenuFlyoutPage_obj1_Bindings TryGetBindingObject()
                {
                    MenuFlyoutPage_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_RepeatToggleMenuFlyoutItem(null);
                    UpdateChildListeners_ShuffleToggleMenuFlyoutItem(null);
                }

                public void DependencyPropertyChanged_RepeatToggleMenuFlyoutItem_IsChecked(global::Microsoft.UI.Xaml.DependencyObject sender, global::Microsoft.UI.Xaml.DependencyProperty prop)
                {
                    MenuFlyoutPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Microsoft.UI.Xaml.Controls.ToggleMenuFlyoutItem obj = sender as global::Microsoft.UI.Xaml.Controls.ToggleMenuFlyoutItem;
                        if (obj != null)
                        {
                            bindings.Update_RepeatToggleMenuFlyoutItem_IsChecked(obj.IsChecked, DATA_CHANGED);
                        }
                    }
                }
                private global::Microsoft.UI.Xaml.Controls.ToggleMenuFlyoutItem cache_RepeatToggleMenuFlyoutItem = null;
                private long tokenDPC_RepeatToggleMenuFlyoutItem_IsChecked = 0;
                public void UpdateChildListeners_RepeatToggleMenuFlyoutItem(global::Microsoft.UI.Xaml.Controls.ToggleMenuFlyoutItem obj)
                {
                    if (obj != cache_RepeatToggleMenuFlyoutItem)
                    {
                        if (cache_RepeatToggleMenuFlyoutItem != null)
                        {
                            cache_RepeatToggleMenuFlyoutItem.UnregisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.ToggleMenuFlyoutItem.IsCheckedProperty, tokenDPC_RepeatToggleMenuFlyoutItem_IsChecked);
                            cache_RepeatToggleMenuFlyoutItem = null;
                        }
                        if (obj != null)
                        {
                            cache_RepeatToggleMenuFlyoutItem = obj;
                            tokenDPC_RepeatToggleMenuFlyoutItem_IsChecked = obj.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.ToggleMenuFlyoutItem.IsCheckedProperty, DependencyPropertyChanged_RepeatToggleMenuFlyoutItem_IsChecked);
                        }
                    }
                }
                public void DependencyPropertyChanged_ShuffleToggleMenuFlyoutItem_IsChecked(global::Microsoft.UI.Xaml.DependencyObject sender, global::Microsoft.UI.Xaml.DependencyProperty prop)
                {
                    MenuFlyoutPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Microsoft.UI.Xaml.Controls.ToggleMenuFlyoutItem obj = sender as global::Microsoft.UI.Xaml.Controls.ToggleMenuFlyoutItem;
                        if (obj != null)
                        {
                            bindings.Update_ShuffleToggleMenuFlyoutItem_IsChecked(obj.IsChecked, DATA_CHANGED);
                        }
                    }
                }
                private global::Microsoft.UI.Xaml.Controls.ToggleMenuFlyoutItem cache_ShuffleToggleMenuFlyoutItem = null;
                private long tokenDPC_ShuffleToggleMenuFlyoutItem_IsChecked = 0;
                public void UpdateChildListeners_ShuffleToggleMenuFlyoutItem(global::Microsoft.UI.Xaml.Controls.ToggleMenuFlyoutItem obj)
                {
                    if (obj != cache_ShuffleToggleMenuFlyoutItem)
                    {
                        if (cache_ShuffleToggleMenuFlyoutItem != null)
                        {
                            cache_ShuffleToggleMenuFlyoutItem.UnregisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.ToggleMenuFlyoutItem.IsCheckedProperty, tokenDPC_ShuffleToggleMenuFlyoutItem_IsChecked);
                            cache_ShuffleToggleMenuFlyoutItem = null;
                        }
                        if (obj != null)
                        {
                            cache_ShuffleToggleMenuFlyoutItem = obj;
                            tokenDPC_ShuffleToggleMenuFlyoutItem_IsChecked = obj.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.ToggleMenuFlyoutItem.IsCheckedProperty, DependencyPropertyChanged_ShuffleToggleMenuFlyoutItem_IsChecked);
                        }
                    }
                }
            }
        }
        /// <summary>
        /// GetWeakRefTarget()
        /// </summary>
        private static T GetWeakRefTarget<T>(global::System.WeakReference<T> weakRef) where T : class
        {
            if (weakRef.TryGetTarget(out T weakRefValue))
            {
                return weakRefValue;
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 0.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2: // ControlPages\MenuFlyoutPage.xaml line 18
                {
                    this.Example1 = (AppUIBasics.ControlExample)target;
                }
                break;
            case 3: // ControlPages\MenuFlyoutPage.xaml line 45
                {
                    this.Example2 = (AppUIBasics.ControlExample)target;
                }
                break;
            case 4: // ControlPages\MenuFlyoutPage.xaml line 76
                {
                    this.Example3 = (AppUIBasics.ControlExample)target;
                }
                break;
            case 5: // ControlPages\MenuFlyoutPage.xaml line 114
                {
                    this.Example4 = (AppUIBasics.ControlExample)target;
                }
                break;
            case 6: // ControlPages\MenuFlyoutPage.xaml line 153
                {
                    this.Example5 = (AppUIBasics.ControlExample)target;
                    ((global::AppUIBasics.ControlExample)this.Example5).Loaded += this.Example5_Loaded;
                }
                break;
            case 7: // ControlPages\MenuFlyoutPage.xaml line 155
                {
                    this.Control5 = (Microsoft.UI.Xaml.Controls.Button)target;
                }
                break;
            case 8: // ControlPages\MenuFlyoutPage.xaml line 116
                {
                    this.Control4 = (Microsoft.UI.Xaml.Controls.Button)target;
                }
                break;
            case 9: // ControlPages\MenuFlyoutPage.xaml line 77
                {
                    this.Control3 = (Microsoft.UI.Xaml.Controls.Button)target;
                }
                break;
            case 10: // ControlPages\MenuFlyoutPage.xaml line 47
                {
                    this.Control2 = (Microsoft.UI.Xaml.Controls.Button)target;
                }
                break;
            case 11: // ControlPages\MenuFlyoutPage.xaml line 52
                {
                    this.RepeatToggleMenuFlyoutItem = (Microsoft.UI.Xaml.Controls.ToggleMenuFlyoutItem)target;
                }
                break;
            case 12: // ControlPages\MenuFlyoutPage.xaml line 53
                {
                    this.ShuffleToggleMenuFlyoutItem = (Microsoft.UI.Xaml.Controls.ToggleMenuFlyoutItem)target;
                }
                break;
            case 15: // ControlPages\MenuFlyoutPage.xaml line 19
                {
                    this.Control1 = (Microsoft.UI.Xaml.Controls.StackPanel)target;
                }
                break;
            case 16: // ControlPages\MenuFlyoutPage.xaml line 29
                {
                    this.Control1Output = (Microsoft.UI.Xaml.Controls.TextBlock)target;
                }
                break;
            case 17: // ControlPages\MenuFlyoutPage.xaml line 23
                {
                    global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem element17 = (Microsoft.UI.Xaml.Controls.MenuFlyoutItem)target;
                    ((global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem)element17).Click += this.MenuFlyoutItem_Click;
                }
                break;
            case 18: // ControlPages\MenuFlyoutPage.xaml line 24
                {
                    global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem element18 = (Microsoft.UI.Xaml.Controls.MenuFlyoutItem)target;
                    ((global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem)element18).Click += this.MenuFlyoutItem_Click;
                }
                break;
            case 19: // ControlPages\MenuFlyoutPage.xaml line 25
                {
                    global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem element19 = (Microsoft.UI.Xaml.Controls.MenuFlyoutItem)target;
                    ((global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem)element19).Click += this.MenuFlyoutItem_Click;
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 0.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Microsoft.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // ControlPages\MenuFlyoutPage.xaml line 12
                {                    
                    global::Microsoft.UI.Xaml.Controls.Page element1 = (global::Microsoft.UI.Xaml.Controls.Page)target;
                    MenuFlyoutPage_obj1_Bindings bindings = new MenuFlyoutPage_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

